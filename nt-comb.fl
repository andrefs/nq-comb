%{
#include <string.h>
%}

%option yylineno
%option noyywrap

ASC     [\x00-\x7f]
ASCN    [\x00-\t\v-\x7f]
X       [\x80-\xbf]
U2      [\xc0-\xdf]
U3      [\xe0-\xef]
U4      [\xf0-\xf7]
U5      [\xf8-\xfb]
U6      [\xfc-\xfd]

UONLY   {U2}{X}|{U3}{X}{2}|{U4}{X}{3}|{U5}{X}{4}|{U6}{X}{5}
U       {ASC}|{UONLY}
P       {ASCN}|{UONLY}
WS      [\ \t]


RCES    (\~|\-|\!|\$|\&|\'|\(|\)|\*|\+|\,|\;|\=|\/|\?|\#|\@|\%|\[|\])
FIM     (@[a-zA-Z0-9_\-]+|\ *|\^\^[a-zA-Z.:0-9]+)\.\ *\n
LIT_FIM     (@[a-zA-Z0-9_\-]+|\ *|\^\^[a-zA-Z.:0-9]+)\.\ *

%x PREF
%x BASE
%x COMM

%x LIT
%x IRI
%x PN

%x ERR

%%
    int l1 = 0;
    int t_elem = 0;
    int error = 0;
    char* t_chars = malloc(2000000*sizeof(int));
    char* err_type = malloc(100*sizeof(int));
    t_chars[0] = '\0';


\@prefix|PREFIX                 strcat(t_chars, yytext); l1=yylineno; BEGIN(PREF);
\@base|BASE                     strcat(t_chars, yytext); l1=yylineno; BEGIN(BASE);
\#                              strcat(t_chars, yytext); l1=yylineno; BEGIN(COMM);

[a-z]+\:                        {
                                    t_elem++;
                                    l1 = yylineno;
                                    strcat(t_chars, yytext);
                                    if(t_elem > 3){
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_PN0_TOO_MANY_ELEMENTS");
                                        BEGIN ERR;
                                    } else {
                                        BEGIN PN;
                                    }
                                }
\"(\"\")?                       {
                                    t_elem++;
                                    l1 = yylineno;
                                    strcat(t_chars, "\"\"\"");
                                    if(t_elem < 3){
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_LIT0_LITERAL_MUST_BE_OBJECT");
                                        BEGIN ERR;
                                    } else if (t_elem > 3){
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_LIT1_TOO_MANY_ELEMENTS");
                                        BEGIN ERR;
                                    } else {
                                        BEGIN LIT;
                                    }
                                }
\<                              {
                                    t_elem++;
                                    l1 = yylineno;
                                    strcat(t_chars, yytext);
                                    if(t_elem > 3){
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_IRI0_TOO_MANY_ELEMENTS");
                                        BEGIN ERR;
                                    } else {
                                        BEGIN IRI;
                                    }
                                }
\n                              {
                                    if(!strlen(t_chars)){
                                        puts("");
                                    }
                                    t_elem = 0;
                                    t_chars[0] = '\0';
                                    l1 = yylineno;
                                }
.                               {
                                    // l1 = yylineno;
                                    strcat(t_chars, yytext);
                                    if(t_elem >= 3){
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_INIT0_TOO_MANY_ELEMENTS");
                                        BEGIN ERR;
                                    }
                                }

<COMM>\n                        puts(t_chars); t_chars[0] = '\0';  t_elem = 0; BEGIN INITIAL;
<COMM>.                         strcat(t_chars, yytext);

<PREF>\n                        puts(t_chars); t_chars[0] = '\0';  t_elem = 0; BEGIN INITIAL;
<PREF>.                         strcat(t_chars, yytext);

<BASE>\n                        puts(t_chars); t_chars[0] = '\0';  t_elem = 0; BEGIN INITIAL;
<BASE>.                         strcat(t_chars, yytext);

<IRI>[a-z]+:\/\/[^ >\^"`|\\{}<>]+\>{WS}*\.{WS}*/\n {
                                    strcat(t_chars, yytext);
                                    if(t_elem == 3){
                                        printf("%s", t_chars);
                                        t_chars[0] = '\0';
                                        t_elem = 0;
                                        BEGIN INITIAL;
                                    } else {
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_IRI1_TOO_FEW_ELEMENTS");
                                        BEGIN ERR;
                                    }
                                }

<IRI>[a-z]+:\/\/[^ >\^"`|\\{}<>]+\>{WS}*       {
                                    strcat(t_chars, yytext);
                                    if(t_elem < 3){
                                        // printf("%s", t_chars);
                                        // t_chars[0] = '\0';
                                        BEGIN INITIAL;
                                    }
                                }
<IRI>.                          {
                                    strcat(t_chars, yytext);
                                    strcat(t_chars, " <---   ");
                                    strcpy(err_type, "ERR_IRI2_WEIRD_CHAR");
                                    BEGIN ERR;
                                }


<LIT>\"\"\"{LIT_FIM}/\n         {
                                    strcat(t_chars, yytext);
                                    if(t_elem == 3){
                                        printf("%s", t_chars);
                                        t_chars[0] = '\0';
                                        BEGIN INITIAL;
                                    } else {
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_LIT1_TOO_FEW_ELEMENTS");
                                        BEGIN ERR;
                                    }
                                }
<LIT>\"{LIT_FIM}/\n          {
                                    strcat(t_chars, "\"\"");
                                    strcat(t_chars, yytext);
                                    if(t_elem == 3){
                                        printf("%s", t_chars);
                                        t_chars[0] = '\0';
                                        BEGIN INITIAL;
                                    } else {
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_LIT1_TOO_FEW_ELEMENTS");
                                        BEGIN ERR;
                                    }
                                }
 /* <LIT>\\[a-mo-zA-Z0-9/ '|\-<>"«§¯),&]  {*/
<LIT>\\[^tbnrf\\]               {
                                    strcat(t_chars, yytext);
                                    strcat(t_chars, " <---   ");
                                    strcpy(err_type, "ERR_LIT2_INVALID_ESCAPE");
                                    BEGIN ERR;
                                }
<LIT>\\n                        {
                                    strcat(t_chars, yytext);
                                    // strcat(t_chars, " <---   ");
                                    // strcpy(err_type, "ERR_LIT3_LINE_END_IN_SHORT_STRING");
                                    // BEGIN ERR;
                                }
<LIT>\"                         {
                                    strcat(t_chars, "\\\"");
                                    // strcat(t_chars, " <---   ");
                                    // strcpy(err_type, "ERR_LIT4_UNMATCHED_QUOTE");
                                    // BEGIN ERR;
                                }
<LIT>.                          strcat(t_chars, yytext);

 /*<PN>.{10000,}\n                 {
                                     strcat(t_chars, yytext);
                                     strcat(t_chars, " <---   ");
                                     strcpy(err_type, "ERR_PN4_LINE_TOO_LONG");
                                     BEGIN ERR;
                                 }*/
<PN>[a-zA-Z0-9_]([a-zA-Z0-9_.:\-]*[a-zA-Z0-9_])? {
                                    if(t_elem > 3){
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_PN1_TOO_MANY_ELEMENTS");
                                        BEGIN ERR;
                                    }
                                    strcat(t_chars, yytext);
                                }
<PN>{WS}*\.{WS}*/\n             {
                                    strcat(t_chars, yytext);
                                    if(t_elem == 3){
                                        printf("%s", t_chars);
                                        t_chars[0] = '\0';
                                        t_elem = 0;
                                        BEGIN INITIAL;
                                    } else {
                                        strcat(t_chars, " <---   ");
                                        strcpy(err_type, "ERR_PN2_TOO_FEW_ELEMENTS");
                                        BEGIN ERR;
                                    }
                                }
<PN>{WS}+                       {
                                    strcat(t_chars, yytext);
                                    // printf("%s", t_chars);
                                    // t_chars[0] = '\0';
                                    BEGIN INITIAL;
                                }
<PN>.                           {
                                    strcat(t_chars, yytext);
                                    strcat(t_chars, " <---   ");
                                    strcpy(err_type, "ERR_PN3_WEIRD_CHAR");
                                    BEGIN ERR;
                                }

<ERR>.+\n                       {
                                    fprintf(stderr, "[%s %d-%d (%d)]\t%s %s\n",err_type, l1, yylineno, t_elem, t_chars, yytext);
                                    t_chars[0] = '\0';
                                    t_elem = 0;
                                    err_type[0] = '\0';
                                    BEGIN INITIAL;
                                }
<<EOF>>                         {
                                    if(strlen(t_chars)){
                                      if(strlen(err_type)){
                                          fprintf(stderr, "[%s %d-%d (%d)]\t%s %s\n",err_type, l1, yylineno, t_elem, t_chars, yytext);
                                      } else {
                                          printf("%s", t_chars);
                                      }
                                    }
                                    yyterminate();
                                }

%%

int main(){
  yylex();

  return 0;
}

